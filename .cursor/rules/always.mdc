
# Always

- Use: `pnpm`, `TypeScript`, `JSDoc`

## Structure

- Monorepo with:
  - `./domain` (shared definitions, types, etc),
  - `./tray-app` in Electron.js,
  - and WFH indicator device `./emulator/`


## Rules

- Don't run the application independently, ask the user to do it
- The application is located in /tray-app/, not in the main repo folder
-- Ask user to run pnpm build and start, don't do it on your own! They will give you logs
- After each sprint, save comments in sprint documentation under tasks, especially regarding what was done differently than planned and everything that developers need to know for the future
- Minimum 1 conventional commit per sprint
- First tests, then document what was done, then commit the sprint
- Sprint documentation is saved in `.cursor/tray-app/` files (recently in files 5 and 6)
- Conventional commits: keep it simple, max 6 lines, use standard format (feat:, fix:, docs:, refactor:)

## Device Mock Specification

### New Device Mock Project
**Location:** `/emulator/` folder
**Purpose:** Mock device for testing tray app communication without real hardware
**Specification:** See `/emulator/.cursor/spec/01.init.md` for full requirements

### Device Mock Requirements:
- **TypeScript + pnpm + JSDoc**
- **LED Ring Simulation:** Status colors, animations, brightness control
- **Button Simulation:** Ask to Enter, long press, double press
- **WiFi Communication:** WebSocket server for status updates
- **Serial Communication:** Pairing simulation with SSID/password
- **Battery Simulation:** Level reporting every 5 minutes

### Device Mock Architecture:
```
emulator/
├── src/main/
│   ├── deviceMock.ts      # Main mock logic
│   ├── ledController.ts    # LED ring simulation
│   ├── buttonHandler.ts    # Physical button simulation
│   └── wifiManager.ts      # WiFi communication
├── src/types/deviceTypes.ts
├── src/utils/
└── tests/
```

## Icons and Assets

### Tray Icons - MISSING ⚠️
**Problem:** Application uses PNG icons, but only SVG files exist
**Solution:** Use Lucide Icons or create basic PNG icons

```bash
# Option 1: Lucide Icons
pnpm add lucide-react

# Option 2: Create basic PNG icons 16x16px
# Required colors: red, orange, yellow, green, blue, gray
# Path: public/icons/circle-{color}.png
```

### Required icon structure:
```
public/icons/
├── circle-red.png     # ON_CALL
├── circle-orange.png  # VIDEO_CALL
├── circle-yellow.png  # FOCUSED
├── circle-green.png   # AVAILABLE
├── circle-blue.png    # AWAY
└── circle-gray.png    # OFFLINE
```

## Resolved Technical Issues

### ✅ `electron-store` → `electron-settings`
**Status:** RESOLVED - do not restore `electron-store`
**Reason:** Compatibility issues with `electron-vite`

### ✅ `serialport` compilation → mock
**Status:** RESOLVED - using mock
**How to restore real `serialport`:**
```bash
# 1. Update g++ to version 11+
sudo apt update && sudo apt install g++-11

# 2. Set environment variables
export CC=gcc-11
export CXX=g++-11

# 3. Remove mock from deviceManager.ts and install real serialport
pnpm install serialport

# 4. Rebuild
pnpm rebuild
```

### ✅ Vite Configuration
**Status:** RESOLVED - added `@rollup/plugin-commonjs`
**File:** `electron.vite.config.ts`

### ✅ Function Export
**Status:** RESOLVED - added export `createPairingWindow`
**File:** `src/main/ipcHandlers.ts`

- We use pnpm, TypeScript, JSDoc
-- Ask user to run pnpm build and start, don't do it on your own! They will give you logs
