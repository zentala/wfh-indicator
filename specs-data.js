const specsData = {"led-indicator":{"title":"Led indicator","content":"<h1>🔴 WFH LED Indicator Concept</h1>\n<p>A custom hardware research project for electronics enthusiasts who want to create a permanent, elegant door status indicator.</p>\n<p><strong>Current Status</strong>:</p>\n<ul>\n<li>Concept and initial specifications complete.</li>\n<li>Looking for community members to help bring this vision to life.</li>\n</ul>\n<p><strong>Next Steps</strong>: Firmware development → PCB design → 3D case modeling → Community testing</p>\n<hr>\n<h2>🎯 Why LED Ring Version?</h2>\n<p>While the phone version solves the immediate problem, the LED ring represents a <strong>research and development exploration</strong> for:</p>\n<ul>\n<li><strong>Permanent installation</strong>: Once mounted, it&#39;s always there</li>\n<li><strong>Elegant form factor</strong>: Designed specifically for door mounting</li>\n<li><strong>Community hardware project</strong>: Open source design for makers</li>\n<li><strong>Lower power consumption</strong>: More efficient than phone displays</li>\n<li><strong>Custom aesthetics</strong>: Can be designed to match home decor</li>\n<li><strong>Learning opportunity</strong>: Great project for electronics hobbyists</li>\n</ul>\n<p><strong>Positioning</strong>: This is an <strong>experimental maker project</strong>, not necessarily more practical than the phone version.</p>\n<hr>\n<h2>🧱 Hardware Architecture</h2>\n<h3>Core Components</h3>\n<ul>\n<li><strong>ESP32 microcontroller</strong> - WiFi connectivity and control</li>\n<li><strong>WS2812B LED ring</strong> - Individually addressable RGB LEDs (16-24 LEDs)</li>\n<li><strong>Momentary button</strong> - &quot;Ask to Enter&quot; functionality for outsiders</li>\n<li><strong>Power system</strong> - batteries or micro-USB connection</li>\n<li><strong>3D printed case</strong> - Custom mounting solution for doors</li>\n</ul>\n<h3>Optional Enhancements</h3>\n<ul>\n<li><strong>PIR motion sensor</strong> - Detect movement in hallway, brighten display to save energy</li>\n<li><strong>Ambient light sensor</strong> - Auto-adjust brightness based on time of day</li>\n</ul>\n<hr>\n<h2>🔧 Technical Specifications</h2>\n<h3>⚡ Power Management</h3>\n<ul>\n<li><p><strong>Voltage requirements</strong>:</p>\n<ul>\n<li>ESP32: 3.3V operating voltage (dev boards typically have onboard regulators accepting 5-12V input)</li>\n<li>ESP8266: 3.3V operating voltage (maximum 3.6V)</li>\n<li>WS2812B LEDs: Works with voltages between 3.3V and 5V (5V recommended for best brightness and reliability)</li>\n</ul>\n</li>\n<li><p><strong>Voltage regulation</strong>:</p>\n<ul>\n<li>Onboard voltage regulator required for battery power</li>\n<li>Level shifter may be needed between ESP (3.3V) and 5V LED data lines</li>\n</ul>\n</li>\n<li><p><strong>Battery options</strong>:</p>\n<ul>\n<li><strong>2x AA/AAA</strong>: ~3V</li>\n<li><strong>3x AA/AAA</strong>: ~4.5V</li>\n<li><strong>Flat LiPo battery</strong> (recommended): 3.7V, 500-2000+ mAh, compact and thin form factor similar to smartphone batteries</li>\n<li><strong>USB power</strong>: Direct connection for stationary installations</li>\n</ul>\n</li>\n<li><p><strong>Battery capacity reference</strong>:</p>\n<ul>\n<li>Alkaline AAA: 850-1200 mAh</li>\n<li>NiMH AAA rechargeable: 350-1000 mAh</li>\n<li>Alkaline AA: 1700-2850 mAh</li>\n<li>NiMH AA rechargeable: 1200-2800 mAh</li>\n<li>LiPo flat: 500-2000+ mAh depending on size</li>\n</ul>\n</li>\n<li><p><strong>Power consumption</strong> (estimated):</p>\n<ul>\n<li><strong>Full brightness</strong>: ~100-150mA</li>\n<li><strong>Energy-saving mode</strong>: ~20-30mA</li>\n<li><strong>Sleep mode</strong>: ~5-10mA</li>\n<li><strong>Runtime</strong>: 10-40 hours depending on battery and usage pattern</li>\n</ul>\n</li>\n<li><p><strong>Power features</strong>:</p>\n<ul>\n<li><strong>Low battery indicator</strong>: LEDs dim when battery &lt;20%</li>\n<li><strong>Battery status reporting</strong>: Sends notifications to tray app when battery is low</li>\n<li><strong>Optional power</strong>: Device designed for both battery and USB power options</li>\n<li><strong>Easy battery access</strong>: Enclosure designed for simple battery replacement/charging</li>\n<li><strong>Charging</strong>: Optional USB-C charging circuit for rechargeable options</li>\n</ul>\n</li>\n</ul>\n<h4>Power Management Challenges</h4>\n<ul>\n<li><strong>Long-term operation</strong>: Current estimates (10-40 hours) fall short of ideal weekly charging cycle</li>\n<li><strong>User experience</strong>: Device should require minimal maintenance to encourage adoption</li>\n<li><strong>Research needed</strong>: Further optimization of power consumption required</li>\n<li><strong>Adaptive brightness</strong>: Automatic adjustment based on ambient light conditions</li>\n<li><strong>Detachable design</strong>: Easy removal for charging without disrupting mounting</li>\n<li><strong>Power states</strong>: Intelligent sleep modes when no movement detected</li>\n</ul>\n<h3>🛜 Communication</h3>\n<h4>Initial Setup &amp; Pairing</h4>\n<ul>\n<li><strong>BLE pairing</strong> (recommended):<ul>\n<li>Device enters BLE pairing mode when button is held during startup</li>\n<li>Tray app discovers device via Bluetooth</li>\n<li>Securely transfers WiFi credentials and tray app IP address</li>\n<li>Once paired, switches to WiFi for normal operation</li>\n</ul>\n</li>\n<li><strong>USB pairing</strong>:<ul>\n<li>Connect device directly to computer via USB</li>\n<li>Tray app communicates through UART/Serial</li>\n<li>Uploads WiFi credentials and communication settings</li>\n<li>Device tests connection and confirms success</li>\n<li>Simple and reliable method for initial setup</li>\n</ul>\n</li>\n<li><strong>Simple admin panel</strong>:<ul>\n<li>ESP32 hosts configuration web server in AP mode</li>\n<li>Connect directly to device&#39;s WiFi network for setup</li>\n<li>Configure WiFi credentials and communication settings</li>\n<li>Once configured, device joins home WiFi network</li>\n</ul>\n</li>\n</ul>\n<h4>Normal Operation</h4>\n<ul>\n<li><strong>WiFi connection</strong> to home network</li>\n<li><strong>WebSocket protocol</strong> for status updates</li>\n<li><strong>Direct IP communication</strong> between tray app and device</li>\n<li><strong>Local network only</strong> (no internet dependency)</li>\n<li><strong>Configuration updates</strong> via JSON over HTTP from tray app</li>\n</ul>\n<h4>Communication settings config</h4>\n<ul>\n<li><strong>Tray app connection</strong>: IP address and port number</li>\n<li><strong>WiFi credentials</strong>: SSID, password, security type (WPA/WPA2/WPA3)</li>\n<li><strong>Authentication</strong>: Shared secret token generated during pairing</li>\n<li><strong>Update server</strong>: Optional remote update source</li>\n<li><strong>Example config</strong>:</li>\n</ul>\n<pre><code class=\"language-json\">{\n  &quot;network&quot;: {\n    &quot;wifi&quot;: {\n      &quot;ssid&quot;: &quot;HomeNetwork&quot;,\n      &quot;password&quot;: &quot;********&quot;,\n      &quot;security&quot;: &quot;WPA2&quot;\n    },\n    &quot;tray_app&quot;: {\n      &quot;ip&quot;: &quot;192.168.1.100&quot;,\n      &quot;port&quot;: 8080,\n      &quot;auth_token&quot;: &quot;a1b2c3d4e5f6g7h8i9j0&quot;\n    }\n  },\n  &quot;device&quot;: {\n    &quot;name&quot;: &quot;office-door&quot;,\n    &quot;brightness&quot;: 70,\n    &quot;motion_detection&quot;: true,\n    &quot;sleep_timeout&quot;: 300\n  }\n}\n</code></pre>\n<h4>Network Challenges</h4>\n<p>Dynamic IP addresses in local networks present a challenge for maintaining stable connections. For detailed solutions to this challenge, see <a href=\"./network-communication.md\">Network Communication Strategy</a> document.</p>\n<h3>🔆 LED Patterns</h3>\n<h4>Display Modes</h4>\n<ul>\n<li><strong>Energy-saving mode</strong>: Reduced brightness with minimal LEDs active to extend battery life</li>\n<li><strong>Active mode</strong>: Full brightness when motion detected or interaction required</li>\n<li><strong>Notification mode</strong>: Special patterns to communicate with people outside the room</li>\n</ul>\n<h4>Status Colors</h4>\n<ul>\n<li><strong>Red</strong>: On call (audio) / Do not disturb</li>\n<li><strong>Orange</strong>: Video call / Do not enter</li>\n<li><strong>Yellow</strong>: Focused / Only urgent interruptions</li>\n<li><strong>Green</strong>: Available / Come in</li>\n<li><strong>Blue</strong>: Away / Not at desk</li>\n</ul>\n<h4>Animation Patterns</h4>\n<ul>\n<li><strong>Slow rotation</strong>: Few LEDs moving in circular pattern (energy-saving default)</li>\n<li><strong>Solid color</strong>: All LEDs lit at full brightness (motion-activated)</li>\n<li><strong>Transition effect</strong>: Gradual change in color proportion showing upcoming status change<ul>\n<li>Example: Increasing red LEDs among green ones = approaching meeting time</li>\n<li>Example: Increasing green LEDs among red ones = meeting ending soon</li>\n</ul>\n</li>\n<li><strong>Blinking patterns</strong> (15-30 seconds duration):<ul>\n<li>Fast green blinking: &quot;Yes&quot; response to &quot;Ask to Enter&quot;</li>\n<li>Fast yellow blinking: &quot;Enter only if important&quot; response</li>\n<li>Fast red blinking: &quot;No&quot; response or &quot;Please be quiet&quot; signal</li>\n</ul>\n</li>\n<li><strong>Connectivity issues</strong>: Cycling through all colors to indicate connection problems</li>\n</ul>\n<h4>Customization Note</h4>\n<p>This is a UI concept only. Animation patterns would be part of practical research based on community feedback, allowing for individual customization to match personal preferences and specific use cases.</p>\n<hr>\n<h2>🔧 Implementation Phases</h2>\n<h3>Phase 1: Basic Prototype</h3>\n<ul>\n<li>ESP32 + LED strip in ring formation</li>\n<li>Basic WiFi communication with tray app</li>\n<li>Simple button input</li>\n<li>Breadboard proof of concept</li>\n</ul>\n<h3>Phase 2: PCB Design</h3>\n<ul>\n<li>Custom circuit board for compact form factor</li>\n<li>Integrated power management</li>\n<li>Professional component layout</li>\n<li>Easier assembly for community builders</li>\n</ul>\n<h3>Phase 3: Enclosure Design</h3>\n<ul>\n<li>3D printable case optimized for door mounting</li>\n<li>Multiple mounting options (magnetic, adhesive, screw)</li>\n<li>Cable management for USB power</li>\n<li>Weather-resistant outdoor version</li>\n</ul>\n<h3>Phase 4: Advanced Features</h3>\n<ul>\n<li>Motion detection integration</li>\n<li>Home Assistant compatibility</li>\n<li>Multiple ring support (different rooms)</li>\n<li>Wireless charging base station</li>\n</ul>\n<hr>\n<h2>🛠 DIY Build Guide (Future)</h2>\n<h3>Required Skills</h3>\n<ul>\n<li>Basic electronics (soldering, breadboard assembly)</li>\n<li>3D printing access or service</li>\n<li>Arduino/ESP32 programming experience</li>\n<li>WiFi network configuration</li>\n</ul>\n<h3>Estimated Costs</h3>\n<ul>\n<li><strong>Components</strong>: $15-25 (ESP32, LEDs, button, resistors)</li>\n<li><strong>Case materials</strong>: $5-10 (3D printing filament)</li>\n<li><strong>Tools needed</strong>: Soldering iron, multimeter, computer for programming</li>\n</ul>\n<h3>Build Time</h3>\n<ul>\n<li><strong>Experienced maker</strong>: 4-6 hours</li>\n<li><strong>Beginner with guidance</strong>: 8-12 hours</li>\n<li><strong>PCB assembly</strong>: 2-3 hours</li>\n</ul>\n<hr>\n<h2>🎨 Design Variations</h2>\n<h3>Ring Sizes</h3>\n<ul>\n<li><strong>Compact</strong>: 60mm diameter (12 LEDs) - minimalist</li>\n<li><strong>Standard</strong>: 80mm diameter (16 LEDs) - balanced visibility</li>\n<li><strong>Large</strong>: 100mm diameter (24 LEDs) - maximum visibility</li>\n</ul>\n<h3>Form Factors</h3>\n<ul>\n<li><strong>LED Ring</strong>: Classic circular display</li>\n<li><strong>Rounded Square</strong>: Modern aesthetic alternative</li>\n<li><strong>LED Strip</strong>: Linear display that can be mounted on door frames</li>\n</ul>\n<h3>Power Options</h3>\n<ul>\n<li><strong>Battery pack</strong>: Portable, requires charging or replacements</li>\n<li><strong>USB cable</strong>: Permanent power, requires cable routing</li>\n<li><strong>Integrated charging circuit</strong>: Recharge without disassembly</li>\n</ul>\n<h3>Prototype Variants Needed</h3>\n<ul>\n<li><strong>Ring variant</strong>: Circular LED arrangement for door mounting</li>\n<li><strong>Rounded Square variant</strong>: Square with rounded corners for modern aesthetic</li>\n<li><strong>Line variant</strong>: Linear LED strip for door frame installation</li>\n</ul>\n<h3>Mounting Options for Each Form Factor</h3>\n<p><strong>Detachable mount principle</strong>: All mounting solutions should allow for easy removal of the device for charging and maintenance, while leaving the mounting hardware in place.</p>\n<h4>By Location</h4>\n<ul>\n<li><strong>Door mount</strong>: Attached directly to door surface</li>\n<li><strong>Frame mount</strong>: Attached to door frame</li>\n<li><strong>Shelf/desk mount</strong>: Free-standing with base for flat surface placement</li>\n<li><strong>Wall mount</strong>: Attached to wall near entrance</li>\n</ul>\n<h4>By Attachment Method</h4>\n<ul>\n<li><strong>Magnetic</strong>: For metal door frames and surfaces (naturally detachable)</li>\n<li><strong>Over-door hanger</strong>: Hangs over the top of door (easily removable)</li>\n<li><strong>Adhesive</strong>: Uses strong tape or glue for permanent mount base with detachable device</li>\n<li><strong>Screws</strong>: Permanent base with slide-in/slide-out device holder</li>\n<li><strong>Free-standing</strong>: With weighted base for stability (inherently portable)</li>\n</ul>\n<h4>Detachable Design Examples</h4>\n<ul>\n<li><strong>Magnetic connector</strong>: Device snaps onto magnetic base that remains attached</li>\n<li><strong>Slide mount</strong>: Device slides into wall/door-mounted bracket</li>\n<li><strong>Twist-lock mechanism</strong>: Simple quarter-turn to attach/detach</li>\n<li><strong>Quick-release clip</strong>: Press-to-release mechanism for fast removal</li>\n</ul>\n<h3>Common Components Across Variants</h3>\n<ul>\n<li><strong>Firmware</strong>: Core ESP32 code works across all variants</li>\n<li><strong>Power management</strong>: Same battery saving and charging solutions adaptable to all designs</li>\n<li><strong>Communication</strong>: Same network protocols and pairing methods</li>\n<li><strong>Button interface</strong>: Tactile button with same interaction patterns</li>\n</ul>\n<h3>Variant-Specific Components</h3>\n<ul>\n<li><strong>PCB design</strong>: Custom layout for each form factor</li>\n<li><strong>3D printed case</strong>: Specific design for each variant and mounting option</li>\n<li><strong>LED arrangement</strong>: Different patterns and quantities based on form factor</li>\n<li><strong>Assembly instructions</strong>: Tailored to each variant&#39;s unique requirements</li>\n</ul>\n<hr>\n<h2>🤝 Community Collaboration</h2>\n<h3>Looking for Contributors</h3>\n<ul>\n<li><strong>PCB designers</strong> - Create professional circuit layouts</li>\n<li><strong>3D modelers</strong> - Design mounting cases and enclosures</li>\n<li><strong>Firmware developers</strong> - ESP32 programming and optimization</li>\n<li><strong>Industrial designers</strong> - Improve aesthetics and usability</li>\n<li><strong>Beta testers</strong> - Build prototypes and provide feedback</li>\n</ul>\n<h3>Open Source Approach</h3>\n<ul>\n<li><strong>Hardware designs</strong>: Creative Commons license</li>\n<li><strong>Firmware code</strong>: MIT license</li>\n<li><strong>Documentation</strong>: Freely shareable build guides</li>\n<li><strong>Community support</strong>: Discord/forum for builders</li>\n</ul>\n<h3>Why Not Ready Yet</h3>\n<ul>\n<li><strong>No working firmware</strong> - ESP32 code needs to be tested and its development finished</li>\n<li><strong>No case designs</strong> - Multiple 3D models designs needed for different variants</li>\n<li><strong>No PCB layouts</strong> - Different PCB boards designs needed for each form factor</li>\n<li><strong>Assembly complexity</strong> - Currently requires PCB design, 3D modelling and printing skills</li>\n</ul>\n<h3>Development Roadmap</h3>\n<ol>\n<li><p><strong>Initial research phase</strong> (current)</p>\n<ul>\n<li>Concept validation and specifications</li>\n<li>Community feedback gathering</li>\n</ul>\n</li>\n<li><p><strong>Prototype development</strong></p>\n<ul>\n<li>Design at least 2 initial variants (ring and line)</li>\n<li>Create PCB layouts for each variant</li>\n<li>Develop 3D printable cases with mounting options</li>\n<li>Document assembly process</li>\n</ul>\n</li>\n<li><p><strong>Community expansion</strong></p>\n<ul>\n<li>Release designs on GitHub</li>\n<li>Encourage community-contributed variants</li>\n<li>Build documentation repository with multiple options</li>\n<li>Create gallery of successful implementations</li>\n</ul>\n</li>\n</ol>\n<h2>🔮 Future Vision</h2>\n<ul>\n<li><strong>Kit sales</strong> - Pre-assembled components for easier building</li>\n</ul>\n<h3>Honest Assessment</h3>\n<p>This is a <strong>research project</strong> that requires community involvement to develop multiple viable solutions. The goal is to create a diverse set of implementation options to suit different user needs.</p>\n<hr>\n<h2>📊 Success Metrics</h2>\n<h3>Community Engagement</h3>\n<ul>\n<li>Number of successful builds documented</li>\n<li>GitHub contributions (issues, PRs, documentation)</li>\n<li>Community forum activity and support</li>\n<li>YouTube build videos and tutorials</li>\n</ul>\n<h3>Technical Milestones</h3>\n<p>Multiple prototype designs completed (at least 2-3 variants):</p>\n<ul>\n<li>Working firmware with all basic features</li>\n<li>Stable 3D printable cases designs</li>\n<li>Different PCB layouts for different form factors ready for manufacturing</li>\n<li>Comprehensive build documentation for each variant</li>\n<li>Mounting solutions documented</li>\n<li>Different form factors implemented (ring, line, etc.)</li>\n</ul>\n<hr>\n<h2>📚 References &amp; Similar Projects</h2>\n<h3>Inspirational Projects</h3>\n<ul>\n<li><a href=\"https://hackaday.com/2015/09/12/led-ring-around-the-esp8266/\">LED Ring Around The ESP8266</a> - Similar concept using ESP8266 without button integration</li>\n<li><a href=\"https://randomnerdtutorials.com/micropython-ws2812b-addressable-rgb-leds-neopixel-esp32-esp8266/\">MicroPython WS2812B Addressable RGB LEDs with ESP32/ESP8266</a> - Tutorial on controlling WS2812B LEDs with MicroPython</li>\n<li><a href=\"https://www.youtube.com/watch?v=4pxLlIhOmeI\">ESP-01 with WLED</a> - Compact implementation using ESP-01 module</li>\n</ul>\n<hr>\n<p><a href=\"../README.md\">← Back to main project</a> | <a href=\"../specs/mobile-app.md\">View mobile app specs</a></p>\n"},"mobile-app":{"title":"Mobile app","content":"<h1>WFH Mobile Indicator - Mobile App Architecture</h1>\n<h2>📱 App Structure (React Native + Expo)</h2>\n<h3>Core Components</h3>\n<pre><code class=\"language-tree\">src/\n├── components/\n│   ├── StatusDisplay.tsx      # Main always-on status screen\n│   ├── AskToEnterButton.tsx   # Interactive button for outsiders\n│   ├── StatusSelector.tsx     # Quick status change (for user inside)\n│   └── ConnectionStatus.tsx   # WiFi/connection indicator\n├── screens/\n│   ├── MainStatusScreen.tsx   # Always-on door display\n│   ├── SetupScreen.tsx        # Initial pairing with tray app\n│   └── SettingsScreen.tsx     # Customization options\n├── services/\n│   ├── NetworkService.ts      # WiFi discovery &amp; communication\n│   ├── StatusService.ts       # Status management &amp; sync\n│   └── NotificationService.ts # Local notifications\n└── types/\n    └── StatusTypes.ts         # TypeScript definitions\n</code></pre>\n<h2>🎨 Interface Design Specifications</h2>\n<h3>Main Status Display (Always-On)</h3>\n<pre><code class=\"language-tsx\">// MainStatusScreen.tsx concept\ninterface StatusDisplayProps {\n  status: WorkStatus;\n  timeRemaining?: string;\n  canAskToEnter: boolean;\n}\n\nenum WorkStatus {\n  ON_CALL = &#39;on_call&#39;,\n  VIDEO_CALL = &#39;video_call&#39;,\n  FOCUSED = &#39;focused&#39;,\n  AVAILABLE = &#39;available&#39;,\n  AWAY = &#39;away&#39;\n}\n</code></pre>\n<h3>Screen States Design</h3>\n<h4>🔴 ON CALL State</h4>\n<pre><code class=\"language-text\">┌─────────────────────────────────┐\n│             BLACK BG            │\n│                                 │\n│          🔴 📞                 │\n│        ON A CALL                │\n│       until 15:30               │\n│                                 │\n│    [  ASK TO ENTER  ]           │\n│       (if urgent)               │\n│                                 │\n│  Last updated: 14:45            │\n└─────────────────────────────────┘\n</code></pre>\n<h4>🟠 VIDEO CALL State</h4>\n<pre><code class=\"language-text\">┌─────────────────────────────────┐\n│             BLACK BG            │\n│                                 │\n│          🟠 🎥                 │\n│       VIDEO CALL                │\n│      just listening             │\n│                                 │\n│    [  ASK TO ENTER  ]           │\n│       (if urgent)               │\n│                                 │\n│  Last updated: 14:45            │\n└─────────────────────────────────┘\n</code></pre>\n<h4>🟡 FOCUSED State</h4>\n<pre><code class=\"language-text\">┌─────────────────────────────────┐\n│             BLACK BG            │\n│                                 │\n│          🟡 💻                 │\n│      FOCUSED WORK               │\n│     please be quiet             │\n│                                 │\n│    [  ASK TO ENTER  ]           │\n│                                 │\n│                                 │\n│  Last updated: 14:45            │\n└─────────────────────────────────┘\n</code></pre>\n<h4>🟢 AVAILABLE State</h4>\n<pre><code class=\"language-text\">┌─────────────────────────────────┐\n│             BLACK BG            │\n│                                 │\n│          🟢 ✅                 │\n│       AVAILABLE                 │\n│      come on in!                │\n│                                 │\n│      [  ENTER  ]                │\n│                                 │\n│                                 │\n│  Last updated: 14:45            │\n└─────────────────────────────────┘\n</code></pre>\n<h4>🔵 AWAY State</h4>\n<pre><code class=\"language-text\">┌─────────────────────────────────┐\n│             BLACK BG            │\n│                                 │\n│          🔵 🚶                 │\n│         AWAY                    │\n│      not at desk                │\n│                                 │\n│    [  LEAVE MESSAGE  ]          │\n│                                 │\n│                                 │\n│  Last updated: 14:45            │\n└─────────────────────────────────┘\n</code></pre>\n<h2>🔄 Interaction Flow</h2>\n<h3>Setup Flow</h3>\n<pre><code class=\"language-text\">1. Download app on old phone\n2. Open app → &quot;Connect to your laptop&quot;\n3. Tray app displays QR code\n4. Scan QR code with phone camera\n5. Connection established!\n6. Mount phone on door\n7. Enable &quot;Always On&quot; display\n</code></pre>\n<h3>Daily Usage Flow</h3>\n<pre><code class=\"language-text\">YOU (at laptop):\n[Change status in tray app]\n    ↓\n[Phone display updates automatically]\n\nFLATMATE (at door):\n[Sees red status: &quot;ON A CALL&quot;]\n[Taps &quot;ASK TO ENTER&quot; if urgent]\n    ↓\n[Your laptop shows notification]\n[You click: &quot;5 more min&quot; or &quot;Come in&quot;]\n    ↓\n[Phone shows your response]\n</code></pre>\n<h2>🛠 Technical Architecture</h2>\n<h3>State Management</h3>\n<pre><code class=\"language-typescript\">interface AppState {\n  currentStatus: WorkStatus;\n  endTime?: Date;\n  connectionStatus: &#39;connected&#39; | &#39;offline&#39; | &#39;searching&#39;;\n  trayAppAddress?: string;\n  authToken?: string;\n  lastUpdated: Date;\n}\n\ninterface StatusChangeRequest {\n  newStatus: WorkStatus;\n  duration?: number; // minutes\n  message?: string;\n}\n\ninterface AskToEnterRequest {\n  timestamp: Date;\n  urgency: &#39;normal&#39; | &#39;urgent&#39;;\n}\n</code></pre>\n<h3>Network Communication</h3>\n<pre><code class=\"language-typescript\">// NetworkService.ts\nclass NetworkService {\n  connectViaScanQR(): Promise&lt;string&gt; {\n    // Scan QR code displayed on tray app\n    // QR contains IP address and auth token\n    // Returns connection info for tray app\n  }\n\n  sendStatusChange(status: WorkStatus): Promise&lt;void&gt; {\n    // HTTP POST to tray app\n  }\n\n  sendAskToEnter(request: AskToEnterRequest): Promise&lt;void&gt; {\n    // Send &quot;knock&quot; request to tray app\n  }\n\n  listenForStatusUpdates(): WebSocket {\n    // WebSocket connection for real-time updates\n  }\n}\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> For detailed information about network communication strategy, IP discovery methods, and reconnection logic, see <a href=\"./network-communication.md\">Network Communication Strategy</a>.</p>\n</blockquote>\n<h3>Always-On Display Management</h3>\n<pre><code class=\"language-typescript\">// Keep screen on and dim\nimport { activateKeepAwake, deactivateKeepAwake } from &#39;expo-keep-awake&#39;;\nimport { Brightness } from &#39;expo-brightness&#39;;\n\n// On app start\nactivateKeepAwake();\nBrightness.setBrightnessAsync(0.3); // Dim but visible\n\n// Battery optimization\nconst isNightMode = new Date().getHours() &gt; 22 || new Date().getHours() &lt; 6;\nBrightness.setBrightnessAsync(isNightMode ? 0.1 : 0.3);\n</code></pre>\n<h2>📋 ADR (Architecture Decision Records)</h2>\n<h3>ADR-001: React Native + Expo Choice</h3>\n<p><strong>Context</strong>: Need cross-platform mobile app for old phones<br><strong>Decision</strong>: Use React Native with Expo</p>\n<ul>\n<li>Easy deployment to old Android phones</li>\n<li>No App Store approval needed</li>\n<li>Can create APK for direct install</li>\n<li>Built-in keep-awake functionality</li>\n</ul>\n<h3>ADR-002: Local WiFi Communication</h3>\n<p><strong>Context</strong>: Phone needs to communicate with laptop tray app<br><strong>Decision</strong>: Primary: Local WiFi with QR code pairing, Fallback: Cloud service<br><strong>Reasoning</strong>:</p>\n<ul>\n<li>Privacy (no data leaves home)</li>\n<li>Low latency</li>\n<li>Works without internet</li>\n<li>Fallback ensures reliability</li>\n<li>QR code pairing works across all platforms (Windows, Mac, Linux)</li>\n</ul>\n<h3>ADR-003: Always-On Display Design</h3>\n<p><strong>Context</strong>: Phone will be mounted on door for hours<br><strong>Decision</strong>: Black background, minimal UI, key info only<br><strong>Reasoning</strong>:</p>\n<ul>\n<li>Battery preservation</li>\n<li>OLED screen efficiency</li>\n<li>Clear visibility from hallway</li>\n<li>Reduces burn-in risk</li>\n</ul>\n<h3>ADR-004: Status Update Method</h3>\n<p><strong>Context</strong>: How to change status from laptop<br><strong>Decision</strong>: Tray app as primary controller, phone as display<br><strong>Reasoning</strong>:</p>\n<ul>\n<li>Natural workflow (status changes while working)</li>\n<li>Phone acts as &quot;dumb terminal&quot;</li>\n<li>Easier to implement</li>\n</ul>\n<h2>🔧 Development Phases</h2>\n<h3>Phase 1: MVP (2-3 days)</h3>\n<ul>\n<li>Basic status display (red/green)</li>\n<li>Manual status toggle on phone</li>\n<li>Simple UI mockup</li>\n<li>No networking yet</li>\n</ul>\n<h3>Phase 2: Connection (1 week)</h3>\n<ul>\n<li>QR code network pairing</li>\n<li>Basic tray app communication</li>\n<li>Status sync between devices</li>\n</ul>\n<h3>Phase 3: Polish (1 week)</h3>\n<ul>\n<li>Always-on optimization</li>\n<li>&quot;Ask to enter&quot; functionality</li>\n<li>Better UI/UX</li>\n<li>Error handling</li>\n</ul>\n<h3>Phase 4: Advanced (future)</h3>\n<ul>\n<li>Calendar integration</li>\n<li>Multiple devices support</li>\n<li>Home Assistant integration</li>\n<li>Settings customization</li>\n</ul>\n<h2>📱 Expo Configuration</h2>\n<h3>Required Expo Modules</h3>\n<pre><code class=\"language-json\">{\n  &quot;expo-keep-awake&quot;: &quot;Screen always on&quot;,\n  &quot;expo-brightness&quot;: &quot;Dim display for battery&quot;,\n  &quot;expo-network&quot;: &quot;Network connectivity checks&quot;,\n  &quot;expo-barcode-scanner&quot;: &quot;QR code scanning for pairing&quot;,\n  &quot;expo-notifications&quot;: &quot;Status change alerts&quot;,\n  &quot;expo-screen-orientation&quot;: &quot;Lock to portrait&quot;\n}\n</code></pre>\n<h3>Build Configuration</h3>\n<pre><code class=\"language-json\">// app.json\n{\n  &quot;expo&quot;: {\n    &quot;name&quot;: &quot;WFH Indicator&quot;,\n    &quot;slug&quot;: &quot;wfh-indicator&quot;,\n    &quot;platforms&quot;: [&quot;android&quot;],\n    &quot;orientation&quot;: &quot;portrait&quot;,\n    &quot;userInterfaceStyle&quot;: &quot;dark&quot;,\n    &quot;backgroundColor&quot;: &quot;#000000&quot;\n  }\n}\n</code></pre>\n"},"network-communication":{"title":"Network communication","content":"<h1>Network Communication Strategy</h1>\n<h2>🌐 Challenge: Dynamic IP Addresses</h2>\n<p>In local networks, devices often receive dynamic IP addresses from DHCP servers. This presents a challenge for maintaining stable connections between:</p>\n<ol>\n<li><strong>LED Ring</strong> and <strong>Tray App</strong> on laptop</li>\n<li><strong>Mobile App</strong> and <strong>Tray App</strong> on laptop</li>\n</ol>\n<p>When the laptop&#39;s IP address changes (after restart, reconnection, etc.), the door devices lose connection to the tray app.</p>\n<h2>💡 Solution Approaches</h2>\n<h3>1. Periodic IP Discovery</h3>\n<ul>\n<li><strong>Polling mechanism</strong>: Door devices periodically check for tray app by sending requests to the network asking &quot;Are you there?&quot; (active approach where the door device initiates communication)</li>\n<li><strong>Broadcast packets</strong>: Tray app regularly broadcasts its presence on local network by sending &quot;I&#39;m here at IP X.X.X.X&quot; messages that all devices can hear (passive approach where door devices just listen)</li>\n<li><strong>Reconnection logic</strong>: Automatic reconnection when connection is lost using both methods above</li>\n</ul>\n<p>These two mechanisms work together:</p>\n<ul>\n<li>Door device listens for broadcast messages from the tray app (passive)</li>\n<li>Door device also actively sends requests looking for the tray app (active polling)</li>\n<li>This combination ensures reliable discovery even if one method fails</li>\n</ul>\n<h3>2. Static IP Assignment</h3>\n<ul>\n<li><strong>Router configuration</strong>: Assign static DHCP lease to laptop</li>\n<li><strong>Manual setup</strong>: Document process for users to set static IP</li>\n<li><strong>MAC address binding</strong>: Link IP to laptop&#39;s network card MAC address</li>\n</ul>\n<h3>3. Connection Broker</h3>\n<ul>\n<li><strong>Local broker service</strong>: Small service running on network (e.g., Raspberry Pi)</li>\n<li><strong>Fixed reference point</strong>: Acts as intermediary with stable IP</li>\n<li><strong>Registration system</strong>: Both devices register with broker</li>\n</ul>\n<h3>4. Cloud Fallback (optional)</h3>\n<ul>\n<li><strong>Privacy-focused relay</strong>: Simple cloud service to reconnect devices</li>\n<li><strong>No status data transmission</strong>: Only connection reestablishment</li>\n<li><strong>Opt-in feature</strong>: Disabled by default for privacy</li>\n</ul>\n<h2>🔄 Implementation Details</h2>\n<h3>LED Ring Implementation</h3>\n<pre><code class=\"language-cpp\">// Pseudocode for reconnection logic\nvoid maintainConnection() {\n  if (!isConnected()) {\n    // Try last known IP first\n    if (connectToLastKnownIP()) {\n      return;\n    }\n\n    // Try broadcast discovery\n    if (discoverTrayAppViaUDP()) {\n      return;\n    }\n\n    // Try connection broker if configured\n    if (brokerEnabled &amp;&amp; connectViaBroker()) {\n      return;\n    }\n\n    // Set status to &quot;disconnected&quot;\n    setConnectionStatus(DISCONNECTED);\n  }\n}\n</code></pre>\n<h3>Mobile App Implementation</h3>\n<pre><code class=\"language-typescript\">// NetworkService.ts\nclass NetworkService {\n  // Store multiple connection methods\n  private connectionMethods = [\n    this.connectDirectIP,\n    this.connectViaBroadcast,\n    this.connectViaBroker\n  ];\n\n  async maintainConnection() {\n    if (!this.isConnected) {\n      // Try all methods in sequence\n      for (const method of this.connectionMethods) {\n        if (await method()) {\n          this.isConnected = true;\n          return;\n        }\n      }\n\n      // Update UI to show disconnected status\n      this.updateConnectionStatus(&#39;disconnected&#39;);\n    }\n  }\n}\n</code></pre>\n<h2>📊 Method Comparison</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Pros</th>\n<th>Cons</th>\n<th>Implementation Difficulty</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Periodic Discovery</td>\n<td>Simple, no configuration</td>\n<td>Network traffic, latency</td>\n<td>Easy</td>\n</tr>\n<tr>\n<td>Static IP</td>\n<td>Reliable, zero latency</td>\n<td>Requires router access</td>\n<td>Medium</td>\n</tr>\n<tr>\n<td>Connection Broker</td>\n<td>Reliable, flexible</td>\n<td>Extra hardware</td>\n<td>Medium</td>\n</tr>\n<tr>\n<td>Cloud Fallback</td>\n<td>Works across networks</td>\n<td>Privacy concerns</td>\n<td>Complex</td>\n</tr>\n</tbody></table>\n<h2>🔒 Security Considerations</h2>\n<ul>\n<li><strong>Initial pairing</strong>: Generate shared secret during first connection</li>\n<li><strong>Authentication</strong>: Use token-based authentication for all communications</li>\n<li><strong>Encryption</strong>: Encrypt all status data, even on local network</li>\n<li><strong>No open ports</strong>: Door devices initiate connections, not the other way around</li>\n</ul>\n<h2>🚀 Recommended Approach</h2>\n<p>A hybrid approach is recommended:</p>\n<ol>\n<li><strong>Primary</strong>: Static IP assignment for reliability (default approach)</li>\n<li><strong>Secondary</strong>: Periodic IP discovery as fallback when static IP isn&#39;t possible</li>\n<li><strong>Future</strong>: Connection broker for multi-device setups and advanced scenarios</li>\n</ol>\n<p>This provides maximum reliability with static IP while maintaining flexibility with discovery mechanisms.</p>\n<h2>📝 References</h2>\n<ul>\n<li><a href=\"./mobile-app.md\">Mobile App Specs</a> - Similar approach for phone implementation</li>\n<li><a href=\"./led-ring.md\">LED Ring Specs</a> - Hardware communication requirements</li>\n</ul>\n"},"tray-app":{"title":"Tray app","content":"<h1>Tray App Specification</h1>\n<p>Simple Electron app in system tray.</p>\n<h2>Features</h2>\n<h3>Basic</h3>\n<ul>\n<li>Shows current status in tray icon</li>\n<li>Status selector (Red/Orange/Yellow/Green/Blue)</li>\n<li>Receives &amp; answers to &quot;Ask to enter&quot; from indicator</li>\n<li>Indicator low battery level notification</li>\n<li>Schedule-based status rules</li>\n<li>Indicator Pairing &amp; Configuration</li>\n</ul>\n<h3>Advanced</h3>\n<ul>\n<li>Auto-sync with calendar(s)</li>\n<li>Detect microphone and camera usage status</li>\n<li>Various Steam Deck plugins</li>\n<li>Home Assistant integration</li>\n<li>Smart Mirror displays</li>\n<li>Multiple WFH Indicators support (different rooms/locations)</li>\n</ul>\n<h2>Tech</h2>\n<ul>\n<li>Electron + TypeScript</li>\n<li>Local WiFi for direct communication</li>\n</ul>\n<h2>Interface</h2>\n<ul>\n<li>Click tray icon → popup with status buttons</li>\n<li>Notification when phone sends &quot;ask to enter&quot;</li>\n<li>Response options to &quot;Ask to Enter&quot; requests:<ul>\n<li>🔴 <strong>NO</strong> (not now)</li>\n<li>🟠 <strong>IF_URGENT</strong> (only if important)</li>\n<li>🟢 <strong>YES</strong> (come in)</li>\n</ul>\n</li>\n<li>Turn off indicator option (disables door device light/display)</li>\n<li>Exit/Quit option in tray menu</li>\n</ul>\n<h3>Settings</h3>\n<ul>\n<li>Default status rules configuration:<ul>\n<li>Schedule-based status rules (e.g., Monday-Friday 10:00-12:00 → Yellow &quot;Focused&quot;)</li>\n<li>Custom time blocks for recurring activities</li>\n</ul>\n</li>\n<li>Settings of WFH Indicator device<ul>\n<li>(Multi-)Device pairing</li>\n<li>Battery level monitoring (reported every 5 minutes via WebSocket)</li>\n<li>Remote device settings control</li>\n</ul>\n</li>\n<li>Notification preferences<ul>\n<li>Silent mode during audio calls (microphone on or screen sharing)</li>\n<li>Visual-only mode during screen sharing - tray icon flashing only</li>\n</ul>\n</li>\n<li>Startup options (launch on system start)</li>\n</ul>\n<h2>Security &amp; Privacy</h2>\n<ul>\n<li>Local-only communication (no cloud dependency)</li>\n<li>Authentication token system for secure device pairing</li>\n<li>Encrypted connection between tray app and indicator devices</li>\n</ul>\n<h2>Network Configuration</h2>\n<ul>\n<li>WebSocket server for indicator device communication</li>\n<li>Configurable port settings (to avoid conflicts with other applications)</li>\n<li>IP discovery mechanisms:<ul>\n<li>Broadcasting service (regularly announces app presence on network)</li>\n<li>Response to polling requests from indicator devices</li>\n</ul>\n</li>\n</ul>\n<h2>Device Communication</h2>\n<p>The tray app communicates with devices using the same WebSocket protocol. Different device types display information according to their capabilities:</p>\n<p><strong>WFH Indicators (door-mounted devices):</strong></p>\n<ul>\n<li><strong><a href=\"./mobile-app.md\">Mobile App</a></strong>: Full status display with text, calendar integration, touch interactions</li>\n<li><strong><a href=\"./led-indicator.md\">LED Ring</a></strong>: Color-only display, button interactions, battery reporting</li>\n</ul>\n<p><strong>Status Display Plugins (smart home integrations):</strong></p>\n<ul>\n<li><strong>Home Assistant</strong>: Status display on dashboards, automations</li>\n<li><strong>Smart Mirrors</strong>: Read-only status display (no &quot;Ask to Enter&quot; support)</li>\n<li><strong>Mobile Widgets</strong>: Remote status viewing anywhere in home</li>\n</ul>\n<p>For detailed network communication strategy, see <a href=\"./network-communication.md\">Network Communication Strategy</a>.</p>\n<h2>Device Pairing</h2>\n<ul>\n<li>Guided pairing wizard for new devices</li>\n<li>QR code generation for mobile app pairing</li>\n<li>USB/UART connection support for LED indicator pairing</li>\n</ul>\n<p>End of spec.</p>\n"}};